// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: notelist.proto

package lovers_srv_noteList

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for NoteList service

type NoteListService interface {
	RequestNoteList(ctx context.Context, in *NoteListReq, opts ...client.CallOption) (*NoteListReq, error)
	ResponseNoteList(ctx context.Context, in *NoteListResp, opts ...client.CallOption) (*NoteListResp, error)
}

type noteListService struct {
	c    client.Client
	name string
}

func NewNoteListService(name string, c client.Client) NoteListService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "lovers.srv.noteList"
	}
	return &noteListService{
		c:    c,
		name: name,
	}
}

func (c *noteListService) RequestNoteList(ctx context.Context, in *NoteListReq, opts ...client.CallOption) (*NoteListReq, error) {
	req := c.c.NewRequest(c.name, "NoteList.RequestNoteList", in)
	out := new(NoteListReq)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteListService) ResponseNoteList(ctx context.Context, in *NoteListResp, opts ...client.CallOption) (*NoteListResp, error) {
	req := c.c.NewRequest(c.name, "NoteList.ResponseNoteList", in)
	out := new(NoteListResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NoteList service

type NoteListHandler interface {
	RequestNoteList(context.Context, *NoteListReq, *NoteListReq) error
	ResponseNoteList(context.Context, *NoteListResp, *NoteListResp) error
}

func RegisterNoteListHandler(s server.Server, hdlr NoteListHandler, opts ...server.HandlerOption) error {
	type noteList interface {
		RequestNoteList(ctx context.Context, in *NoteListReq, out *NoteListReq) error
		ResponseNoteList(ctx context.Context, in *NoteListResp, out *NoteListResp) error
	}
	type NoteList struct {
		noteList
	}
	h := &noteListHandler{hdlr}
	return s.Handle(s.NewHandler(&NoteList{h}, opts...))
}

type noteListHandler struct {
	NoteListHandler
}

func (h *noteListHandler) RequestNoteList(ctx context.Context, in *NoteListReq, out *NoteListReq) error {
	return h.NoteListHandler.RequestNoteList(ctx, in, out)
}

func (h *noteListHandler) ResponseNoteList(ctx context.Context, in *NoteListResp, out *NoteListResp) error {
	return h.NoteListHandler.ResponseNoteList(ctx, in, out)
}
