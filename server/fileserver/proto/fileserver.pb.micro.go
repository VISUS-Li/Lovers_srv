// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: fileserver.proto

package lovers_srv_file

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for FileServer service

type FileServerService interface {
	DownLoadFile(ctx context.Context, in *DownLoadFileReq, opts ...client.CallOption) (*DownLoadFileResp, error)
	UpLoadFile(ctx context.Context, in *UpLoadFileReq, opts ...client.CallOption) (*UpLoadFileResp, error)
	DelFile(ctx context.Context, in *DelFileReq, opts ...client.CallOption) (*DelFileResp, error)
}

type fileServerService struct {
	c    client.Client
	name string
}

func NewFileServerService(name string, c client.Client) FileServerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "lovers.srv.file"
	}
	return &fileServerService{
		c:    c,
		name: name,
	}
}

func (c *fileServerService) DownLoadFile(ctx context.Context, in *DownLoadFileReq, opts ...client.CallOption) (*DownLoadFileResp, error) {
	req := c.c.NewRequest(c.name, "FileServer.DownLoadFile", in)
	out := new(DownLoadFileResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServerService) UpLoadFile(ctx context.Context, in *UpLoadFileReq, opts ...client.CallOption) (*UpLoadFileResp, error) {
	req := c.c.NewRequest(c.name, "FileServer.UpLoadFile", in)
	out := new(UpLoadFileResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServerService) DelFile(ctx context.Context, in *DelFileReq, opts ...client.CallOption) (*DelFileResp, error) {
	req := c.c.NewRequest(c.name, "FileServer.DelFile", in)
	out := new(DelFileResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FileServer service

type FileServerHandler interface {
	DownLoadFile(context.Context, *DownLoadFileReq, *DownLoadFileResp) error
	UpLoadFile(context.Context, *UpLoadFileReq, *UpLoadFileResp) error
	DelFile(context.Context, *DelFileReq, *DelFileResp) error
}

func RegisterFileServerHandler(s server.Server, hdlr FileServerHandler, opts ...server.HandlerOption) error {
	type fileServer interface {
		DownLoadFile(ctx context.Context, in *DownLoadFileReq, out *DownLoadFileResp) error
		UpLoadFile(ctx context.Context, in *UpLoadFileReq, out *UpLoadFileResp) error
		DelFile(ctx context.Context, in *DelFileReq, out *DelFileResp) error
	}
	type FileServer struct {
		fileServer
	}
	h := &fileServerHandler{hdlr}
	return s.Handle(s.NewHandler(&FileServer{h}, opts...))
}

type fileServerHandler struct {
	FileServerHandler
}

func (h *fileServerHandler) DownLoadFile(ctx context.Context, in *DownLoadFileReq, out *DownLoadFileResp) error {
	return h.FileServerHandler.DownLoadFile(ctx, in, out)
}

func (h *fileServerHandler) UpLoadFile(ctx context.Context, in *UpLoadFileReq, out *UpLoadFileResp) error {
	return h.FileServerHandler.UpLoadFile(ctx, in, out)
}

func (h *fileServerHandler) DelFile(ctx context.Context, in *DelFileReq, out *DelFileResp) error {
	return h.FileServerHandler.DelFile(ctx, in, out)
}
