// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: user.proto

package lovers_srv_user

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for User service

type UserService interface {
	Login(ctx context.Context, in *LoginReq, opts ...client.CallOption) (*LoginResp, error)
	Logout(ctx context.Context, in *LogoutReq, opts ...client.CallOption) (*LogoutResp, error)
	RegisterUser(ctx context.Context, in *RegisterReq, opts ...client.CallOption) (*RegisterResp, error)
	//Lover相关操作
	BindLover(ctx context.Context, in *BindLoverReq, opts ...client.CallOption) (*BindLoverResp, error)
	UnBindLover(ctx context.Context, in *UnBindLoverReq, opts ...client.CallOption) (*UnBindLoverResp, error)
	GetBindWaitCode(ctx context.Context, in *GetBindWaitCodeReq, opts ...client.CallOption) (*GetBindWaitCodeResp, error)
	GetWaitingUser(ctx context.Context, in *GetWaitingUserReq, opts ...client.CallOption) (*GetWaitingUserResp, error)
	//用户账户相关操作
	QueryUserIsExistById(ctx context.Context, in *QueryUserIsExistByIdReq, opts ...client.CallOption) (*QueryUserIsExistByIdResp, error)
	QueryLoverIdById(ctx context.Context, in *QueryLoverIdByIdReq, opts ...client.CallOption) (*QueryLoverIdByIdResp, error)
	//用户设置相关操作
	UpdateUserAllConfig(ctx context.Context, in *UpdateUserAllConfigReq, opts ...client.CallOption) (*UpdateUserAllConfigResp, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "lovers.srv.user"
	}
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) Login(ctx context.Context, in *LoginReq, opts ...client.CallOption) (*LoginResp, error) {
	req := c.c.NewRequest(c.name, "User.Login", in)
	out := new(LoginResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Logout(ctx context.Context, in *LogoutReq, opts ...client.CallOption) (*LogoutResp, error) {
	req := c.c.NewRequest(c.name, "User.Logout", in)
	out := new(LogoutResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) RegisterUser(ctx context.Context, in *RegisterReq, opts ...client.CallOption) (*RegisterResp, error) {
	req := c.c.NewRequest(c.name, "User.RegisterUser", in)
	out := new(RegisterResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) BindLover(ctx context.Context, in *BindLoverReq, opts ...client.CallOption) (*BindLoverResp, error) {
	req := c.c.NewRequest(c.name, "User.BindLover", in)
	out := new(BindLoverResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UnBindLover(ctx context.Context, in *UnBindLoverReq, opts ...client.CallOption) (*UnBindLoverResp, error) {
	req := c.c.NewRequest(c.name, "User.UnBindLover", in)
	out := new(UnBindLoverResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetBindWaitCode(ctx context.Context, in *GetBindWaitCodeReq, opts ...client.CallOption) (*GetBindWaitCodeResp, error) {
	req := c.c.NewRequest(c.name, "User.GetBindWaitCode", in)
	out := new(GetBindWaitCodeResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetWaitingUser(ctx context.Context, in *GetWaitingUserReq, opts ...client.CallOption) (*GetWaitingUserResp, error) {
	req := c.c.NewRequest(c.name, "User.GetWaitingUser", in)
	out := new(GetWaitingUserResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) QueryUserIsExistById(ctx context.Context, in *QueryUserIsExistByIdReq, opts ...client.CallOption) (*QueryUserIsExistByIdResp, error) {
	req := c.c.NewRequest(c.name, "User.QueryUserIsExistById", in)
	out := new(QueryUserIsExistByIdResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) QueryLoverIdById(ctx context.Context, in *QueryLoverIdByIdReq, opts ...client.CallOption) (*QueryLoverIdByIdResp, error) {
	req := c.c.NewRequest(c.name, "User.QueryLoverIdById", in)
	out := new(QueryLoverIdByIdResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateUserAllConfig(ctx context.Context, in *UpdateUserAllConfigReq, opts ...client.CallOption) (*UpdateUserAllConfigResp, error) {
	req := c.c.NewRequest(c.name, "User.UpdateUserAllConfig", in)
	out := new(UpdateUserAllConfigResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User service

type UserHandler interface {
	Login(context.Context, *LoginReq, *LoginResp) error
	Logout(context.Context, *LogoutReq, *LogoutResp) error
	RegisterUser(context.Context, *RegisterReq, *RegisterResp) error
	//Lover相关操作
	BindLover(context.Context, *BindLoverReq, *BindLoverResp) error
	UnBindLover(context.Context, *UnBindLoverReq, *UnBindLoverResp) error
	GetBindWaitCode(context.Context, *GetBindWaitCodeReq, *GetBindWaitCodeResp) error
	GetWaitingUser(context.Context, *GetWaitingUserReq, *GetWaitingUserResp) error
	//用户账户相关操作
	QueryUserIsExistById(context.Context, *QueryUserIsExistByIdReq, *QueryUserIsExistByIdResp) error
	QueryLoverIdById(context.Context, *QueryLoverIdByIdReq, *QueryLoverIdByIdResp) error
	//用户设置相关操作
	UpdateUserAllConfig(context.Context, *UpdateUserAllConfigReq, *UpdateUserAllConfigResp) error
}

func RegisterUserHandler(s server.Server, hdlr UserHandler, opts ...server.HandlerOption) error {
	type user interface {
		Login(ctx context.Context, in *LoginReq, out *LoginResp) error
		Logout(ctx context.Context, in *LogoutReq, out *LogoutResp) error
		RegisterUser(ctx context.Context, in *RegisterReq, out *RegisterResp) error
		BindLover(ctx context.Context, in *BindLoverReq, out *BindLoverResp) error
		UnBindLover(ctx context.Context, in *UnBindLoverReq, out *UnBindLoverResp) error
		GetBindWaitCode(ctx context.Context, in *GetBindWaitCodeReq, out *GetBindWaitCodeResp) error
		GetWaitingUser(ctx context.Context, in *GetWaitingUserReq, out *GetWaitingUserResp) error
		QueryUserIsExistById(ctx context.Context, in *QueryUserIsExistByIdReq, out *QueryUserIsExistByIdResp) error
		QueryLoverIdById(ctx context.Context, in *QueryLoverIdByIdReq, out *QueryLoverIdByIdResp) error
		UpdateUserAllConfig(ctx context.Context, in *UpdateUserAllConfigReq, out *UpdateUserAllConfigResp) error
	}
	type User struct {
		user
	}
	h := &userHandler{hdlr}
	return s.Handle(s.NewHandler(&User{h}, opts...))
}

type userHandler struct {
	UserHandler
}

func (h *userHandler) Login(ctx context.Context, in *LoginReq, out *LoginResp) error {
	return h.UserHandler.Login(ctx, in, out)
}

func (h *userHandler) Logout(ctx context.Context, in *LogoutReq, out *LogoutResp) error {
	return h.UserHandler.Logout(ctx, in, out)
}

func (h *userHandler) RegisterUser(ctx context.Context, in *RegisterReq, out *RegisterResp) error {
	return h.UserHandler.RegisterUser(ctx, in, out)
}

func (h *userHandler) BindLover(ctx context.Context, in *BindLoverReq, out *BindLoverResp) error {
	return h.UserHandler.BindLover(ctx, in, out)
}

func (h *userHandler) UnBindLover(ctx context.Context, in *UnBindLoverReq, out *UnBindLoverResp) error {
	return h.UserHandler.UnBindLover(ctx, in, out)
}

func (h *userHandler) GetBindWaitCode(ctx context.Context, in *GetBindWaitCodeReq, out *GetBindWaitCodeResp) error {
	return h.UserHandler.GetBindWaitCode(ctx, in, out)
}

func (h *userHandler) GetWaitingUser(ctx context.Context, in *GetWaitingUserReq, out *GetWaitingUserResp) error {
	return h.UserHandler.GetWaitingUser(ctx, in, out)
}

func (h *userHandler) QueryUserIsExistById(ctx context.Context, in *QueryUserIsExistByIdReq, out *QueryUserIsExistByIdResp) error {
	return h.UserHandler.QueryUserIsExistById(ctx, in, out)
}

func (h *userHandler) QueryLoverIdById(ctx context.Context, in *QueryLoverIdByIdReq, out *QueryLoverIdByIdResp) error {
	return h.UserHandler.QueryLoverIdById(ctx, in, out)
}

func (h *userHandler) UpdateUserAllConfig(ctx context.Context, in *UpdateUserAllConfigReq, out *UpdateUserAllConfigResp) error {
	return h.UserHandler.UpdateUserAllConfig(ctx, in, out)
}
