// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: MsgPush.proto

package lovers_srv_msg_push

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for MSG_PUSH service

type MSG_PUSHService interface {
	//获取给定用户累计跑步数据
	GetRunStatisticsByUserId(ctx context.Context, in *RunStatisByUserIdReq, opts ...client.CallOption) (*RunStatisByUserIdResp, error)
}

type mSG_PUSHService struct {
	c    client.Client
	name string
}

func NewMSG_PUSHService(name string, c client.Client) MSG_PUSHService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "lovers.srv.msg_push"
	}
	return &mSG_PUSHService{
		c:    c,
		name: name,
	}
}

func (c *mSG_PUSHService) GetRunStatisticsByUserId(ctx context.Context, in *RunStatisByUserIdReq, opts ...client.CallOption) (*RunStatisByUserIdResp, error) {
	req := c.c.NewRequest(c.name, "MSG_PUSH.GetRunStatisticsByUserId", in)
	out := new(RunStatisByUserIdResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MSG_PUSH service

type MSG_PUSHHandler interface {
	//获取给定用户累计跑步数据
	GetRunStatisticsByUserId(context.Context, *RunStatisByUserIdReq, *RunStatisByUserIdResp) error
}

func RegisterMSG_PUSHHandler(s server.Server, hdlr MSG_PUSHHandler, opts ...server.HandlerOption) error {
	type mSG_PUSH interface {
		GetRunStatisticsByUserId(ctx context.Context, in *RunStatisByUserIdReq, out *RunStatisByUserIdResp) error
	}
	type MSG_PUSH struct {
		mSG_PUSH
	}
	h := &mSG_PUSHHandler{hdlr}
	return s.Handle(s.NewHandler(&MSG_PUSH{h}, opts...))
}

type mSG_PUSHHandler struct {
	MSG_PUSHHandler
}

func (h *mSG_PUSHHandler) GetRunStatisticsByUserId(ctx context.Context, in *RunStatisByUserIdReq, out *RunStatisByUserIdResp) error {
	return h.MSG_PUSHHandler.GetRunStatisticsByUserId(ctx, in, out)
}
